<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.hust.dao.dao.OutRegistrationMapper">

    <resultMap id="OutRegistrationResultMap" type="edu.hust.dao.dto.OutRegistration">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="client_id" property="clientId" jdbcType="VARCHAR"/>
        <result column="nurse_id" property="nurseId" jdbcType="VARCHAR"/>
        <result column="reason" property="reason" jdbcType="VARCHAR"/>
        <result column="out_time" property="outTime" jdbcType="DATE"/>
        <result column="partner_name" property="partnerName" jdbcType="VARCHAR"/>
        <result column="partner_phone" property="partnerPhone" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="back_time_expected" property="backTimeExpected" jdbcType="DATE"/>
        <result column="back_time_real" property="backTimeReal" jdbcType="DATE"/>
    </resultMap>

    <select id="selectList" resultMap="OutRegistrationResultMap">
        select * from out_registration
    </select>

    <select id="selectById" resultMap="OutRegistrationResultMap">
        select * from out_registration where id = #{id, jdbcType=VARCHAR}
    </select>

    <select id="selectByDateAndNurseIdAndClientId" resultMap="OutRegistrationResultMap">
        select * from out_registration
        <trim prefix="where" suffixOverrides="and">
            <if test="start_out_time != null"> out_time <![CDATA[>]]> #{start_out_time, jdbcType=DATE} and </if>
            <if test="end_out_time != null"> out_time <![CDATA[<]]> #{end_out_time, jdbcType=DATE} and </if>
            <if test="nurse_id != null"> nurse_id = #{nurse_id, jdbcType=VARCHAR} and </if>
            <if test="client_id != null"> client_id = #{client_id, jdbcType=VARCHAR} and </if>
        </trim>
    </select>

    <select id="selectByBackTimeReal" resultMap="OutRegistrationResultMap">
        select * from out_registration where back_time_real is null
    </select>

    <insert id="add" parameterType="edu.hust.dao.dto.OutRegistration">
        insert into out_registration
        (
        id,
        client_id,
        nurse_id,
        reason,
        out_time,
        partner_name,
        partner_phone,
        remark,
        back_time_expected,
        back_time_real
        ) values
        (
        #{out_registration.id, jdbcType=VARCHAR},
        #{out_registration.clientId, jdbcType=VARCHAR},
        #{out_registration.nurseId, jdbcType=VARCHAR},
        #{out_registration.reason, jdbcType=VARCHAR},
        #{out_registration.outTime, jdbcType=DATE},
        #{out_registration.partnerName, jdbcType=VARCHAR},
        #{out_registration.partnerPhone, jdbcType=VARCHAR},
        #{out_registration.remark, jdbcType=VARCHAR},
        #{out_registration.backTimeExpected, jdbcType=DATE},
        #{out_registration.backTimeReal, jdbcType=DATE}
        )
    </insert>

    <insert id="addBatch" parameterType="edu.hust.dao.dto.OutRegistration">
        insert into out_registration
        (
        id,
        client_id,
        nurse_id,
        reason,
        out_time,
        partner_name,
        partner_phone,
        remark,
        back_time_expected,
        back_time_real
        ) values
        <foreach collection="list" index="index" item="out_registration" separator=",">
        (
        #{out_registration.id, jdbcType=VARCHAR},
        #{out_registration.clientId, jdbcType=VARCHAR},
        #{out_registration.nurseId, jdbcType=VARCHAR},
        #{out_registration.reason, jdbcType=VARCHAR},
        #{out_registration.outTime, jdbcType=DATE},
        #{out_registration.partnerName, jdbcType=VARCHAR},
        #{out_registration.partnerPhone, jdbcType=VARCHAR},
        #{out_registration.remark, jdbcType=VARCHAR},
        #{out_registration.backTimeExpected, jdbcType=DATE},
        #{out_registration.backTimeReal, jdbcType=DATE}
        )
        </foreach>
    </insert>

    <update id="update" parameterType="edu.hust.dao.dto.OutRegistration">
        update out_registration
        set
        client_id = #{out_registration.clientId, jdbcType=VARCHAR},
        nurse_id = #{out_registration.nurseId, jdbcType=VARCHAR},
        reason = #{out_registration.reason, jdbcType=VARCHAR},
        out_time = #{out_registration.outTime, jdbcType=DATE},
        partner_name = #{out_registration.partnerName, jdbcType=VARCHAR},
        partner_phone = #{out_registration.partnerPhone, jdbcType=VARCHAR},
        remark = #{out_registration.remark, jdbcType=VARCHAR},
        back_time_expected = #{out_registration.backTimeExpected, jdbcType=DATE},
        back_time_real = #{out_registration.backTimeReal, jdbcType=DATE}
        where
        id = #{out_registration.id, jdbcType=VARCHAR}
    </update>

    <delete id="deleteById" parameterType="String">
        delete from out_registration where id = #{id, jdbcType=VARCHAR}
    </delete>

    <delete id="deleteAll">
        delete from out_registration
    </delete>

</mapper>